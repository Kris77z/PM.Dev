import type {
  UserScenariosData,
  RequirementGoalData,
  CompetitorAnalysisData,
  FeatureSuggestionData,
  BusinessLogicData,
  EdgeCasesData,
  ReviewData,
  PRDGenerationData
} from './types';

// 1. 用户场景扩展提示词
export const getUserScenariosPrompt = (data: UserScenariosData): string => {
  const { businessLine, requirementIntro } = data;
  
  return `作为一名专业的产品经理，请基于以下需求信息，深入分析并扩展用户使用场景。

**业务线**：${businessLine || '未指定'}
**需求介绍**：
${requirementIntro}

请从以下维度分析用户场景：
1. **用户类型细分**：不同经验水平、使用频率、业务角色的用户群体
2. **具体使用场景**：什么时候、什么地方、什么情况下会使用这个功能
3. **深层痛点分析**：用户在当前情况下遇到的具体问题和困难

要求：
- 生成3-5个典型且具有代表性的用户场景
- 每个场景要具体、实用，避免泛泛而谈
- 痛点分析要深入、有针对性，体现真实的用户痛点
- 覆盖不同类型的用户群体和使用情境
- 使用场景避免出现人名（用字母代替）

请严格按照以下JSON格式输出，不要添加任何额外的文字：
[
  {
    "userType": "用户类型",
    "scenario": "使用场景",
    "painPoint": "痛点分析"
  }
]`;
};

// 2. 需求目标生成提示词
export const getRequirementGoalPrompt = (data: RequirementGoalData): string => {
  const { businessLine, requirementIntro, userScenarios } = data;
  
  return `作为一名专业的产品经理，请基于以下信息，生成清晰、具体、可衡量的需求目标。

**业务线**：${businessLine || '未指定'}
**需求介绍**：
${requirementIntro}

**用户场景分析**：
${JSON.stringify(userScenarios, null, 2)}

请基于以上信息，生成一个需求目标，要求：

## 目标制定原则
1. **明确针对哪类用户群体**
2. **明确要解决哪类用户群体的核心痛点**
3. **说明通过什么方式解决**
4. **描述预期达到的具体效果，避免带有数据性的语句（例如活跃度提升30%，因为短期无法量化）**

## 目标格式要求
- 语言简洁明了，一段话说清楚
- 逻辑清晰：目标用户 → 核心痛点 → 解决方案 → 预期效果
- 具体可执行，避免空泛的描述
- 与用户场景高度关联

## 重要输出要求
- 直接输出需求目标内容，不要添加任何解释性文字
- 不要使用引号、双引号等标点符号包裹内容
- 确保语言自然流畅，避免格式化符号干扰

请确保输出的目标清晰、具体、可执行。`;
};

// 3. 竞品分析提示词
export const getCompetitorAnalysisPrompt = (data: CompetitorAnalysisData): string => {
  const { businessLine, requirementIntro, requirementGoal } = data;
  
  return `作为一名专业的产品经理和市场分析师，请通过联网搜索获取最新市场信息，分析相关竞争对手的产品特点、优劣势，以及在竞品在该功能上的特性、面向的用户类型。横向比较并提供差异化建议。

**业务线**：${businessLine || '未指定'}
**需求介绍**：${requirementIntro}
**需求目标**：${requirementGoal || '未指定'}

请使用联网搜索功能，获取最新的市场信息，并提供一份专业的竞品分析报告。报告应包含：

## 详细分析要求

### 1. 主要竞品识别
- 找出3-5个主要竞争对手
- 包含产品名称、公司背景、市场地位
- 重点关注与我们需求相关的产品或功能

### 2. 功能深度分析
- **核心功能特点**：详细描述各竞品的主要功能模块，至少100字详细说明
- **用户界面和交互设计特色**：分析UI/UX设计亮点
- **技术实现方案和架构特点**：技术栈、性能表现等
- **功能的完整性和易用性对比**：从用户体验角度深入分析

### 3. 优劣势深度分析
**各竞品优势：**
- 功能亮点和创新点，具体到功能细节
- 用户体验优势，包括操作流程、界面设计等
- 技术或商业模式优势，市场策略等

**各竞品不足：**
- 功能缺陷或限制，具体痛点描述
- 用户痛点和投诉，基于真实用户反馈
- 技术债务或架构问题

### 4. 市场地位分析
- 用户规模、市场份额
- 商业模式和盈利情况
- 行业影响力和竞争地位

请基于最新的2024-2025年市场信息进行分析，确保信息的时效性和准确性。

**关键输出要求：**
1. 严格只输出JSON数据，绝对不要任何介绍、总结或解释性文字
2. 不要使用代码块标记，直接输出JSON
3. 不要在JSON前后添加任何说明文字
4. 所有内容必须使用中文
5. 确保JSON格式完全正确，可以被程序直接解析
6. **内容质量要求**：每个字段都要详细充实，features字段至少100字，advantages和disadvantages字段至少80字

输出格式(请严格遵循，不要添加任何其他内容，第一个字符就是{)：
{
  "competitors": [
    {
      "name": "竞品名称",
      "features": "核心功能特点和技术方案的详细描述，至少100字，包含主要功能模块、技术架构、用户体验设计等详细信息",
      "advantages": "主要优势和亮点的深入分析，至少80字，具体说明用户价值、技术优势、市场地位等",
      "disadvantages": "不足和问题的详细分析，至少80字，包含用户痛点、功能限制、技术问题等",
      "marketPosition": "市场地位、用户规模、商业模式的详细描述"
    }
  ],
  "summary": "整体分析总结和我们的差异化机会建议，至少150字的深度分析"
}`;
};

// 4. 内容审查提示词 - 重点优化评分标准
export const getReviewPrompt = (data: ReviewData): string => {
  const { answers, changeRecords, userScenarios, iterationHistory, requirementSolution } = data;
  
  return `作为一名资深产品专家和PRD审查师，请对以下PRD内容进行专业审查和评分。

=== PRD表单数据 ===
${JSON.stringify(answers, null, 2)}

=== 变更记录 ===
${JSON.stringify(changeRecords, null, 2)}

=== 用户场景分析 ===
${JSON.stringify(userScenarios, null, 2)}

=== 功能迭代历史 ===
${JSON.stringify(iterationHistory, null, 2)}

=== 需求方案设计 ===
${JSON.stringify(requirementSolution, null, 2)}

请按照以下维度进行评分审查（总分100分）：

## 严格评分标准（必须遵守）

**首要检查 - 需求方案存在性：**
- 检查 requirementSolution 数据是否存在、是否为数组、数组长度是否大于0
- 如果需求方案为空或未填写，直接判定为不及格（总分不超过55分）

1. **方案设计（45分）**：**PRD的核心，必须严格评分**
   - **需求方案存在性（20分）**：如果没有任何需求方案，直接扣除全部20分
   - **需求拆解合理性（10分）**：需求名称、功能描述的完整性和逻辑性
   - **业务逻辑完善度（10分）**：业务流程、数据需求、边缘处理的详细程度
   - **方案可执行性（5分）**：技术可行性、验收标准的明确性
   
2. **需求完整性（20分）**：需求介绍、目标、背景是否完整清晰

3. **用户价值（20分）**：用户场景、痛点分析是否深入准确

4. **项目规划（15分）**：技术实现、项目管理、人员配置是否合理

## 强制评分规则
1. **需求方案为空**：
   - requirementSolution 为空、null、undefined 或空数组时
   - 方案设计直接得0分，总分最高55分，isReadyForGeneration 必须为 false
   
2. **需求方案不足**：
   - 只有1-2个简单需求，缺少关键字段时
   - 方案设计得分不超过20分，总分很难超过60分
   
3. **60分及格线**：
   - 只有需求方案齐全且质量较好的PRD才能超过60分
   - 低于60分必须设置 isReadyForGeneration: false

## 评分逻辑
没有需求方案 = 不及格，这是产品经理工作的底线要求。

请严格按照以下JSON格式输出，不要添加任何额外的解释文字，只输出JSON：

\`\`\`json
{
  "score": 75,
  "isReadyForGeneration": true,
  "issues": [
    {
      "level": "warning|error|info",
      "field": "具体字段名",
      "message": "问题描述",
      "suggestion": "具体的改进建议"
    }
  ],
  "summary": "PRD整体质量评价，重点说明方案设计情况",
  "recommendations": [
    "针对性的改进建议1",
    "针对性的改进建议2"
  ]
}
\`\`\`

重要：请只返回上述格式的JSON内容，不要添加任何其他文字。如果总分低于60分，务必详细说明原因并提供改进路径。`;
};

// 5. PRD生成提示词 - 精简逻辑，避免冗余扩展
export const getPRDGenerationPrompt = (data: PRDGenerationData): string => {
  const { answers, changeRecords, userScenarios, iterationHistory, requirementSolution, competitors } = data;
  
  return `作为一名资深产品经理，请基于以下已填写的表单数据，进行归纳、整理和格式化，生成一份精炼、结构化的PRD文档。

=== PRD表单数据 ===
${JSON.stringify(answers, null, 2)}

=== 变更记录 ===
${JSON.stringify(changeRecords, null, 2)}

=== 用户场景分析 ===
${JSON.stringify(userScenarios, null, 2)}

=== 竞品分析数据 ===
${JSON.stringify(competitors, null, 2)}

=== 功能迭代历史 ===
${JSON.stringify(iterationHistory, null, 2)}

=== 需求方案设计 ===
${JSON.stringify(requirementSolution, null, 2)}

## 核心要求：精炼总结，避免冗余扩展

**重要原则：**
- **严格基于数据**：所有内容必须来源于上述表单数据，禁止自行添加未提供的信息
- **归纳整理为主**：核心任务是将零散的表单数据用专业语言串联成结构化文档
- **避免过度扩展**：不要进行大量的细节补充或二次创作
- **保持精炼性**：内容简洁明了，避免冗余描述

请严格按照以下格式生成PRD文档（对应5张填写卡片）：

## 1. 需求介绍

**产品背景和需求概述：** 基于需求介绍卡片中的内容，简洁总结产品背景、目标和所属业务线

**团队成员配置：**

| 产品经理 | 前端开发 | 后端开发 | 数据分析 |
|----------|----------|----------|----------|
| [基于表单数据，如未填写则显示"暂未提及"] | [基于表单数据，如未填写则显示"暂未提及"] | [基于表单数据，如未填写则显示"暂未提及"] | [基于表单数据，如未填写则显示"暂未提及"] |


**变更记录：**

| 版本 | 修订人 | 修订日期 | 修订原因 |
|------|--------|----------|----------|
| [基于变更记录数据生成表格] |

## 2. 需求分析

**用户场景分析：**

<div style="overflow-x: auto;">

| 用户类型 | 使用场景 | 痛点分析 | 期望功能 | 使用频率 |
|----------|----------|----------|----------|----------|
| [基于用户场景数据生成表格，如未填写则显示"暂未提及"] |

</div>

**需求目标：** 基于需求目标卡片中填写的具体目标和成功指标

## 3. 竞品分析

<div style="overflow-x: auto;">

| 产品名称 | 功能特点 | 主要优势 | 不足之处 | 市场地位 | 定价策略 | 用户评价 |
|----------|----------|----------|----------|----------|----------|----------|
| [基于竞品分析卡片数据生成表格，确保所有竞品信息都完整展示，如某项未填写则显示"暂未提及"] |

</div>

## 4. 需求方案

<div style="overflow-x: auto;">

| 需求名称 | 优先级 | 功能点/流程 | 业务逻辑 | 数据需求 | 边缘处理 | 解决痛点 | 对应模块 | 验收标准 |
|----------|--------|-------------|----------|----------|----------|----------|----------|----------|
| [基于需求方案卡片数据生成表格，确保所有需求信息都完整展示，如某项未填写则显示"暂未提及"] |

</div>

**开放问题：** 列出需求方案中的待定决策和开放问题

## 5. 其余事项

**相关文档链接：** 基于其余事项卡片中的文档链接信息

**功能迭代历史：**

| 版本 | 负责人 | 发布日期 | 迭代内容 |
|------|--------|----------|----------|
| [基于功能迭代历史数据生成表格] |

**输出要求：**
1. 使用标准markdown格式，二级标题用##
2. 避免过度使用列表符号，优先使用段落描述和数字编号
3. 功能点使用"功能名称：功能描述"的格式
4. **重要**：如果某个表单字段为空或未填写，对应位置必须显示"暂未提及"
5. **表格数据处理**：
   - 团队成员配置：列头直接是角色名称，内容是对应负责人
   - 竞品分析：确保所有竞品信息都完整展示在表格中
   - 需求方案：确保所有需求方案都完整展示在表格中
   - 用户场景分析：包含完整的用户场景信息
6. **横向滚动表格**：用户场景分析、竞品分析、需求方案的表格都已用<div style="overflow-x: auto;">包装
7. 内容完全基于提供的数据，不要自行扩展
8. 语言专业但简洁，避免冗余表述
9. 不要在开头添加一级标题"# 产品需求文档"
10. 表格中的数据要完整体现表单中填写的信息，不能遗漏任何已填写内容

请确保输出内容完全基于已提供的数据，避免任何形式的内容扩展或补充。`;
};

// 6. 功能建议提示词
export const getFeatureSuggestionPrompt = (data: FeatureSuggestionData): string => {
  const { requirement, userScenarios, competitorAnalysis } = data;
  
  return `作为一名专业的产品经理，请基于以下信息，为产品功能提供专业建议。

**需求描述**：
${requirement}

**用户场景分析**：
${userScenarios ? JSON.stringify(userScenarios, null, 2) : '未提供'}

**竞品分析**：
${competitorAnalysis || '未提供'}

请从以下维度分析并提供功能建议：

## 分析要求
1. **功能解构**：将需求拆解为具体的功能模块
2. **用户价值**：每个功能对用户的具体价值
3. **实现复杂度**：评估技术实现难度
4. **优先级排序**：根据价值和复杂度进行排序

## 输出格式
请严格按照以下JSON格式输出，不要添加任何额外的文字：

[
  {
    "featureName": "功能名称",
    "description": "功能详细描述",
    "workflow": "用户使用流程",
    "value": "用户价值说明",
    "complexity": "实现复杂度(低/中/高)",
    "priority": "优先级(高/中/低)"
  }
]`;
};

// 7. 业务逻辑建议提示词
export const getBusinessLogicPrompt = (data: BusinessLogicData): string => {
  const { featureName, requirement } = data;
  
  return `作为一名专业的产品经理，请为以下功能设计详细的业务逻辑。

**功能名称**：${featureName}
**需求背景**：${requirement || '未提供'}

请提供完整的业务逻辑设计，包括：

## 业务逻辑要求
1. **核心流程**：主要业务流程步骤
2. **判断条件**：关键决策点和判断逻辑
3. **数据流转**：数据在系统中的流动过程
4. **状态管理**：不同状态的定义和转换规则
5. **权限控制**：用户权限和操作限制
6. **异常处理**：异常情况的处理机制

请以清晰、结构化的文本形式输出，不需要JSON格式。`;
};

// 8. 边缘场景建议提示词
export const getEdgeCasesPrompt = (data: EdgeCasesData): string => {
  const { featureName, businessLogic } = data;
  
  return `作为一名专业的产品经理和测试专家，请为以下功能分析可能的边缘场景和异常情况。

**功能名称**：${featureName}
**业务逻辑**：${businessLogic || '未提供'}

请从以下维度分析边缘场景：

## 分析维度
1. **输入异常**：非法、超限、空值等输入场景
2. **状态异常**：系统状态不正常时的处理
3. **网络异常**：网络中断、超时等情况
4. **并发场景**：多用户同时操作的冲突处理
5. **数据异常**：数据不一致、丢失等情况
6. **权限边界**：权限不足、越权操作等
7. **性能极限**：大数据量、高并发等极限情况

请严格按照以下JSON格式输出，不要添加任何额外的文字：

[
  {
    "category": "场景分类",
    "scenario": "具体场景描述",
    "issue": "可能产生的问题",
    "solution": "解决方案建议"
  }
]`;
}; 