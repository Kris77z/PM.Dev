/**
 * 参考模板收集工具 - Reference Template Collector
 * 
 * 这个工具帮助用户快速将优秀的产品界面转换为参考模板，
 * 并添加到模板库中供AI生成时使用。
 */

import type { 
  ReferenceTemplate, 
  ProductType, 
  IndustryType,
  LayoutAnalysis,
  ComponentSpec,
  InteractionPattern,
  VisualStyleGuide,
  BusinessLogicPattern
} from './template-library';
import { 
  templateLibrary, 
  PRODUCT_TYPES, 
  INDUSTRY_TYPES,
  createReferenceTemplate,
  validateTemplate 
} from './template-library';

// ================== 模板收集接口 ==================

export interface TemplateCollectionData {
  // 基本信息
  name: string;
  description: string;
  referenceUrl?: string;
  screenshotPath?: string;
  
  // 分类信息
  productTypeId: string;
  industryTypeId: string;
  tags: string[];
  
  // 分析内容（可选，会智能生成）
  layoutAnalysis?: Partial<LayoutAnalysis>;
  components?: ComponentSpec[];
  interactions?: InteractionPattern[];
  visualStyle?: Partial<VisualStyleGuide>;
  businessLogic?: BusinessLogicPattern[];
  
  // 质量评估
  qualityScore?: number;
}

export interface CollectionResult {
  success: boolean;
  template?: ReferenceTemplate;
  errors: string[];
  suggestions: string[];
  autoGeneratedContent: {
    layout?: LayoutAnalysis;
    components?: ComponentSpec[];
    interactions?: InteractionPattern[];
    visual?: VisualStyleGuide;
    business?: BusinessLogicPattern[];
  };
}

// ================== 主收集工具类 ==================

export class TemplateCollector {
  /**
   * 收集并添加新的参考模板
   */
  collectTemplate(data: TemplateCollectionData): CollectionResult {
    const errors: string[] = [];
    const suggestions: string[] = [];
    const autoGenerated: CollectionResult['autoGeneratedContent'] = {};

    // 1. 验证基本信息
    const basicValidation = this.validateBasicInfo(data);
    if (basicValidation.length > 0) {
      return {
        success: false,
        errors: basicValidation,
        suggestions: [],
        autoGeneratedContent: {}
      };
    }

    // 2. 获取产品类型和行业类型
    const productType = this.getProductType(data.productTypeId);
    const industryType = this.getIndustryType(data.industryTypeId);

    if (!productType || !industryType) {
      errors.push('无效的产品类型或行业类型');
      return {
        success: false,
        errors,
        suggestions: [],
        autoGeneratedContent: {}
      };
    }

    // 3. 智能生成缺失的分析内容
    const analysisContent = this.generateAnalysisContent(data, productType, industryType);
    
    // 4. 创建完整的模板
    const template = createReferenceTemplate(
      {
        name: data.name,
        description: data.description,
        category: productType,
        industry: industryType
      },
      {
        layout: data.layoutAnalysis ? { ...this.getDefaultLayout(), ...data.layoutAnalysis } : analysisContent.layout,
        components: data.components || analysisContent.components,
        interactions: data.interactions || analysisContent.interactions,
        visual: data.visualStyle ? { ...this.getDefaultVisual(), ...data.visualStyle } : analysisContent.visual,
        business: data.businessLogic || analysisContent.business
      },
      {
        qualityScore: data.qualityScore || this.estimateQualityScore(data),
        tags: data.tags,
        referenceUrl: data.referenceUrl,
        screenshotPath: data.screenshotPath
      }
    );

    // 5. 最终验证
    const finalValidation = validateTemplate(template);
    if (finalValidation.length > 0) {
      return {
        success: false,
        errors: finalValidation,
        suggestions: this.generateImprovementSuggestions(data),
        autoGeneratedContent: autoGenerated
      };
    }

    // 6. 添加到模板库
    templateLibrary.addTemplate(template);

    return {
      success: true,
      template,
      errors: [],
      suggestions: this.generateOptimizationSuggestions(template),
      autoGeneratedContent: {
        layout: data.layoutAnalysis ? undefined : analysisContent.layout,
        components: data.components ? undefined : analysisContent.components,
        interactions: data.interactions ? undefined : analysisContent.interactions,
        visual: data.visualStyle ? undefined : analysisContent.visual,
        business: data.businessLogic ? undefined : analysisContent.business
      }
    };
  }

  /**
   * 快捷方法：从URL收集模板
   */
  collectFromUrl(
    url: string, 
    productTypeId: string, 
    industryTypeId: string,
    additionalInfo?: Partial<TemplateCollectionData>
  ): CollectionResult {
    const basicData: TemplateCollectionData = {
      name: additionalInfo?.name || this.extractNameFromUrl(url),
      description: additionalInfo?.description || this.generateDescriptionFromUrl(url),
      referenceUrl: url,
      productTypeId,
      industryTypeId,
      tags: additionalInfo?.tags || this.generateTagsFromUrl(url),
      ...additionalInfo
    };

    return this.collectTemplate(basicData);
  }

  /**
   * 批量收集模板
   */
  collectMultipleTemplates(templates: TemplateCollectionData[]): CollectionResult[] {
    return templates.map(template => this.collectTemplate(template));
  }

  // ================== 验证方法 ==================

  private validateBasicInfo(data: TemplateCollectionData): string[] {
    const errors: string[] = [];

    if (!data.name || data.name.trim().length < 3) {
      errors.push('模板名称至少需要3个字符');
    }

    if (!data.description || data.description.trim().length < 10) {
      errors.push('模板描述至少需要10个字符');
    }

    if (!data.productTypeId) {
      errors.push('必须指定产品类型');
    }

    if (!data.industryTypeId) {
      errors.push('必须指定行业类型');
    }

    if (!data.tags || data.tags.length === 0) {
      errors.push('至少需要一个标签');
    }

    return errors;
  }

  private getProductType(id: string): ProductType | undefined {
    return PRODUCT_TYPES.find(type => type.id === id);
  }

  private getIndustryType(id: string): IndustryType | undefined {
    return INDUSTRY_TYPES.find(type => type.id === id);
  }

  // ================== 智能生成方法 ==================

  private generateAnalysisContent(
    data: TemplateCollectionData, 
    productType: ProductType, 
    industryType: IndustryType
  ) {
    return {
      layout: this.generateLayoutAnalysis(data, productType, industryType),
      components: this.generateComponentSpecs(data, productType),
      interactions: this.generateInteractionPatterns(data, productType),
      visual: this.generateVisualStyle(data, industryType),
      business: this.generateBusinessLogic(data, productType, industryType)
    };
  }

  private generateLayoutAnalysis(
    data: TemplateCollectionData, 
    productType: ProductType, 
    industryType: IndustryType
  ): LayoutAnalysis {
    const defaultLayout = this.getDefaultLayout();
    
    // 根据产品类型定制布局
    if (productType.id === 'saas-tools') {
      return {
        ...defaultLayout,
        structure: '左侧导航 + 主内容区 + 右侧详情面板的经典SaaS布局',
        navigationPattern: '垂直导航菜单，支持折叠',
        contentOrganization: '表格/卡片视图切换，支持筛选和搜索',
        responsiveStrategy: '移动端导航折叠，表格转为卡片堆叠'
      };
    } else if (productType.id === 'social-media') {
      return {
        ...defaultLayout,
        structure: '顶部导航 + 三栏布局（侧边栏 + 信息流 + 推荐）',
        navigationPattern: '顶部水平导航 + 侧边栏快捷操作',
        contentOrganization: '时间线信息流，无限滚动加载',
        responsiveStrategy: '移动端单栏显示，底部导航栏'
      };
    }

    return defaultLayout;
  }

  private generateComponentSpecs(data: TemplateCollectionData, productType: ProductType): ComponentSpec[] {
    const baseComponents: ComponentSpec[] = [];

    // 根据产品类型生成常见组件
    if (productType.id === 'saas-tools') {
      baseComponents.push(
        {
          name: '数据表格',
          type: 'table',
          description: '支持排序、筛选、分页的数据表格组件',
          useCase: '显示和管理大量结构化数据',
          implementation: '使用HTML table + Tailwind样式 + JavaScript交互'
        },
        {
          name: '仪表盘卡片',
          type: 'card',
          description: '显示关键指标和数据的卡片组件',
          useCase: '数据概览和快速洞察',
          implementation: '卡片布局 + 图表库集成 + 响应式设计'
        }
      );
    } else if (productType.id === 'social-media') {
      baseComponents.push(
        {
          name: '内容卡片',
          type: 'post',
          description: '用户发布内容的展示卡片',
          useCase: '信息流中的内容展示',
          implementation: '弹性布局 + 媒体嵌入 + 交互按钮'
        },
        {
          name: '用户头像',
          type: 'avatar',
          description: '用户头像和基本信息展示',
          useCase: '用户身份识别和快速信息',
          implementation: '圆形头像 + 在线状态 + hover交互'
        }
      );
    }

    // 通用组件
    baseComponents.push(
      {
        name: '主导航',
        type: 'navigation',
        description: '应用主导航菜单',
        useCase: '页面间跳转和功能访问',
        implementation: '响应式导航 + 当前页面高亮 + 移动端适配'
      },
      {
        name: '搜索框',
        type: 'search',
        description: '全局搜索输入框',
        useCase: '内容和功能的快速查找',
        implementation: '实时搜索建议 + 历史记录 + 快捷键支持'
      }
    );

    return baseComponents;
  }

  private generateInteractionPatterns(data: TemplateCollectionData, productType: ProductType): InteractionPattern[] {
    return [
      {
        name: '主操作流程',
        trigger: '用户点击主要功能按钮',
        behavior: '引导用户完成核心任务的步骤化流程',
        feedback: '进度指示器 + 步骤确认 + 成功/失败反馈',
        bestPractice: '保持流程简洁，提供清晰的下一步指导'
      },
      {
        name: '数据操作',
        trigger: '用户对数据进行增删改查',
        behavior: '即时响应用户操作，提供操作确认',
        feedback: '加载状态 + 操作结果通知 + 撤销选项',
        bestPractice: '支持批量操作，提供操作历史'
      },
      {
        name: '错误处理',
        trigger: '系统出现错误或用户操作失败',
        behavior: '友好的错误提示和解决建议',
        feedback: '明确的错误信息 + 重试选项 + 帮助链接',
        bestPractice: '避免技术术语，提供可操作的解决方案'
      }
    ];
  }

  private generateVisualStyle(data: TemplateCollectionData, industryType: IndustryType): VisualStyleGuide {
    const baseStyle = this.getDefaultVisual();

    // 根据行业定制视觉风格
    if (industryType.id === 'fintech') {
      return {
        ...baseStyle,
        colorScheme: '专业的蓝色调为主，配以灰白色，体现信任和稳定',
        brandingApproach: '简洁专业，突出数据和安全性'
      };
    } else if (industryType.id === 'healthcare') {
      return {
        ...baseStyle,
        colorScheme: '清新的绿色调为主，配以白色，体现健康和生机',
        brandingApproach: '温和友善，突出关怀和专业'
      };
    }

    return baseStyle;
  }

  private generateBusinessLogic(
    data: TemplateCollectionData, 
    productType: ProductType, 
    industryType: IndustryType
  ): BusinessLogicPattern[] {
    return [
      {
        scenario: '用户注册和登录',
        implementation: '邮箱/手机验证 + 社交登录选项 + 密码重置',
        dataFlow: '用户输入 → 验证 → 创建会话 → 跳转主页',
        userJourney: '注册 → 邮箱验证 → 完善资料 → 开始使用',
        keyFeatures: ['表单验证', '验证码', '记住登录', '安全退出']
      },
      {
        scenario: '核心功能使用',
        implementation: '基于产品类型的核心业务逻辑实现',
        dataFlow: '用户操作 → 数据处理 → 状态更新 → 界面刷新',
        userJourney: '发现功能 → 学习使用 → 熟练操作 → 分享推荐',
        keyFeatures: productType.keywords.slice(0, 4)
      }
    ];
  }

  // ================== 默认内容生成 ==================

  private getDefaultLayout(): LayoutAnalysis {
    return {
      structure: '响应式网格布局，支持多列自适应',
      gridSystem: '12列网格系统，支持嵌套',
      navigationPattern: '顶部导航 + 面包屑导航',
      contentOrganization: '模块化内容区域，清晰的层次结构',
      responsiveStrategy: '移动端优先，渐进式增强'
    };
  }

  private getDefaultVisual(): VisualStyleGuide {
    return {
      colorScheme: '现代简洁的配色方案，主色调配以中性色',
      typography: '清晰的字体层级，良好的可读性',
      spacing: '一致的间距系统，合理的留白',
      iconStyle: '简洁的线性图标，统一的视觉语言',
      brandingApproach: '简约现代，突出功能性和易用性'
    };
  }

  // ================== 质量评估方法 ==================

  private estimateQualityScore(data: TemplateCollectionData): number {
    let score = 70; // 基础分

    // 信息完整性加分
    if (data.referenceUrl) score += 10;
    if (data.screenshotPath) score += 10;
    if (data.description.length > 50) score += 5;
    if (data.tags.length >= 3) score += 5;

    return Math.min(score, 100);
  }

  // ================== 建议生成方法 ==================

  private generateImprovementSuggestions(data: TemplateCollectionData): string[] {
    const suggestions: string[] = [];

    if (!data.referenceUrl) {
      suggestions.push('建议提供参考链接以便查看原始设计');
    }

    if (!data.screenshotPath) {
      suggestions.push('建议上传界面截图作为视觉参考');
    }

    if (data.tags.length < 3) {
      suggestions.push('建议添加更多标签以便分类和搜索');
    }

    return suggestions;
  }

  private generateOptimizationSuggestions(template: ReferenceTemplate): string[] {
    const suggestions: string[] = [];

    if (template.componentLibrary.length < 5) {
      suggestions.push('可以添加更多组件分析以丰富模板内容');
    }

    if (template.interactionPatterns.length < 3) {
      suggestions.push('可以补充更多交互模式分析');
    }

    if (template.qualityScore < 80) {
      suggestions.push('可以通过完善分析内容来提升模板质量评分');
    }

    return suggestions;
  }

  // ================== URL处理方法 ==================

  private extractNameFromUrl(url: string): string {
    try {
      const urlObj = new URL(url);
      const hostname = urlObj.hostname.replace('www.', '');
      return hostname.split('.')[0] + '界面';
    } catch {
      return '参考模板';
    }
  }

  private generateDescriptionFromUrl(url: string): string {
    const name = this.extractNameFromUrl(url);
    return `基于${name}的优秀设计模式和用户体验，适合作为同类产品的参考模板`;
  }

  private generateTagsFromUrl(url: string): string[] {
    const tags = ['界面设计', '用户体验'];
    
    if (url.includes('github')) tags.push('开发工具', '代码管理');
    if (url.includes('notion')) tags.push('效率工具', '协作');
    if (url.includes('figma')) tags.push('设计工具', '协作');
    if (url.includes('twitter')) tags.push('社交媒体', '信息流');
    
    return tags;
  }
}

// ================== 导出实例和快捷方法 ==================

export const templateCollector = new TemplateCollector();

/**
 * 快捷方法：收集模板
 */
export function collectTemplate(data: TemplateCollectionData): CollectionResult {
  return templateCollector.collectTemplate(data);
}

/**
 * 快捷方法：从URL收集
 */
export function collectFromUrl(
  url: string, 
  productTypeId: string, 
  industryTypeId: string,
  additionalInfo?: Partial<TemplateCollectionData>
): CollectionResult {
  return templateCollector.collectFromUrl(url, productTypeId, industryTypeId, additionalInfo);
}

/**
 * 获取可用的产品类型列表
 */
export function getAvailableProductTypes(): ProductType[] {
  return PRODUCT_TYPES;
}

/**
 * 获取可用的行业类型列表
 */
export function getAvailableIndustryTypes(): IndustryType[] {
  return INDUSTRY_TYPES;
} 